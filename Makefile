# SYNOPSIS:
#
#   make [bin/main] - makes the main executable.
#   make TARGET     - makes the given target.
#   make test       - run all test suites.
#   make clean      - removes all files generated by make.

CXX = g++

# Location of the source code.
SOURCE_DIR = ./src
SOURCE = $(wildcard $(SOURCE_DIR)/*.cpp) $(wildcard $(SOURCE_DIR)/**/*.cpp)

# Makes the main executable.
bin/main: $(SOURCE:%.cpp=%.o)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

# Run all test suites.
test: bin/bundled-test
	bin/bundled-test

# Removes all files generated by make.
clean:
	find . \( -name '*.o' -o -name '*.a' \) -exec rm {} \; && rm -f bin/*

# Tests.

# Location of the tests.
TESTS_DIR = ./tests
TESTS = $(wildcard $(TESTS_DIR)/*.cpp) $(wildcard $(TESTS_DIR)/**/*.cpp)

# Points to the root of Google Test, relative to where this file is.
GTEST_DIR = ./googletest/googletest

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS += -isystem $(GTEST_DIR)/include

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
gtest-all.o: $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc

gtest_main.o: $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc

gtest.a: gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gtest_main.a: gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# Builds object file of seperate test.
%_test.o : $(TESTS_DIR)/%_test.cpp $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $<

# Builds bundled test.
bin/bundled-test: $(TESTS:%.cpp=%.o) $(patsubst %.cpp, %.o, $(filter-out ./src/main.cpp, $(SOURCE))) gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(COVERAGE_FLAGS_) -lpthread $^ -o $@
